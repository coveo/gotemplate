Hello @FirstName @LastName

I sent an email to Someone@company.com

@@$a := 1                          @$a := 1
@@$b := 2                          @$b := 2
@@$c := 3                          @$c := 3
@@$d := $a + mul($b, 5)            @$d := $a + mul($b, 5)
@@$e := add($a, $b) // Check sum   @$e := add($a, $b) // Check sum
@@$s := upper("hello")             @$s := upper("hello")
@@$s := dict "a" 1 "b" 2           @$s := dict "a" 1 "b" 2
@@s2 := data("a=1 b=2")            @s2 := data "a=1 b=2"
@@$x := 0                          @$x := 0

# With line comment to avoid error in language such as YAML, HCL
#@$comment := 1
#   @$comment := 2
##  @$comment := 3
//@$comment := 4
//  @$comment := 5

@@        => @ => {{ $ }}
@@$       => @$ => {{ $ }}
@@.       => @. => {{ . }}
@@env     => @env => {{ $.env }}
@@.env    => @.env => {{ .env }}
@@$a      => @$a => {{ $a }}
@@($)     => @($) => {{ $ }}
@@(a)     => @(a) => {{ $.a }}
@@(.)     => @(.) => {{ . }}
@@(env)   => @(env) => {{ $.env }}
@@(.env)  => @(.env) => {{ .env }}
@@($a)    => @($a) => {{ $a }}
@@s2.a    => @($.s2.a) => {{ $.s2.a }}

@@($.env | upper) => @upper($.env) => {{ upper $.env }}

------------------------------------------------------------------------------------------
@@$foo := "bar"
@$foo := "bar"
{{- $foo := "bar" }}
------------------------------------------------------------------------------------------
@@foo := "bar"
@foo := "bar"
{{- set $ "foo" ("bar") }}
------------------------------------------------------------------------------------------
@@exec("ls -l")
@exec("ls -l")
{{ exec "ls -l" }}
------------------------------------------------------------------------------------------
@@exec("ls -l" "../*.go")
@exec("ls -l" "../*.go")
{{ exec "ls -l" "../*.go" }}
------------------------------------------------------------------------------------------

@# line comment with #
@// line comment with //
@/*
block comment
*/
------------------------------------------------------------------------------------------

@range(exec "ls -l" | splitLines)
    @range(exec "ls -l" | splitLines)
    @endrange
@endrange

------------------------------------------------------------------------------------------
@@(1 + 2)
@(1 + 2)
{{ add 1 2 }}
------------------------------------------------------------------------------------------
@@(1 - 2)
@(1 - 2)
{{ sub 1 2 }}
------------------------------------------------------------------------------------------
@@(1 * 2)
@(1 * 2)
{{ mul 1 2 }}
------------------------------------------------------------------------------------------
@@(1 * 2 + 3 * 4 +5+6)
@(1 * 2 + 3 * 4 +5+6)
{{ add (add (add (mul 1 2) (mul 3 4)) 5) 6 }}
------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------
@@if (!$a) {}
@if (!$a) {}
{{- if not $a }}{{- end }}
------------------------------------------------------------------------------------------
@@if ($a == 1) {}
@if ($a == 1) {}
{{- if eq $a 1 }}{{- end }}
------------------------------------------------------------------------------------------
@@if ($a != 1 || $b == 2) {}
@if ($a != 1 || $b == 2) {}
{{- if or (ne $a 1) (eq $b 2) }}{{- end }}
------------------------------------------------------------------------------------------
@@if ($a != 1 || $b == 2 && $c == 3) {}
@if ($a != 1 || $b == 2 && $c == 3) {}
{{- if or (ne $a 1) (and (eq $b 2) (eq $c 3)) }}{{- end }}
------------------------------------------------------------------------------------------
@@if(($a != 1 || $b == 2) && $c == 3);
@if(($a != 1 || $b == 2) && $c == 3);
{{- if and (or (ne $a 1) (eq $b 2)) (eq $c 3) }}{{- end }}
------------------------------------------------------------------------------------------
@@if(!($a + 4 ne 1 or $b eq 2) and $s.a eq 3);
@if(!($a + 4 ne 1 or $b eq 2) and $s.a eq 3);
{{- if and (not (or (ne (add $a 4) 1) (eq $b 2))) (eq $s.a 3) }}{{- end }}
------------------------------------------------------------------------------------------

@template ("tmpl")
Hello @(2 * 10)
@end template

@block ("block" "arg1")
Hello @.
@end block

@with (exec "ls -l" | splitLines)
    @.
@else
    Nothing
@end with

@with("Hello") @.; # This is a test
