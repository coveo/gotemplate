
# Assignation

## Global variables

As in Go lang, you must initially declare your global variable using the `:=` assignment operator and subsequent overwrite use the `=` operator.

Sometime, global variables may exist without the code writer being aware of their existence. They could be defined in an imported file and we
need a mean to be able to assign theses variables without pre-assign validation. In that case, you could use the special `~=` assignment operator.

| Razor expression                            | Go Template                                                                     | Note
| ----------------                            | -----------                                                                     | ----
| `{{- assert (isNil $.string) "$.string has already been declared, use = to overwrite existing value" }}{{- set $ "string" "string value" }}`                | `<pre-assign check code>{{- set $ "string" "string value" }}`                   | Global declare and assign of string
| `{{- assert (isNil $.numeric1) "$.numeric1 has already been declared, use = to overwrite existing value" }}{{- set $ "numeric1" 10 }}`                          | `<pre-assign check code>{{- set $ "numeric1" 10 }}`                             | Global declare and assign of integer
| `{{- assert (isNil $.numeric2) "$.numeric2 has already been declared, use = to overwrite existing value" }}{{- set $ "numeric2" 1.23 }}`                        | `<pre-assign check code>{{- set $ "numeric2" 1.23 }}`                           | Global declare and assign of floating point
| `{{- assert (isNil $.numeric3) "$.numeric3 has already been declared, use = to overwrite existing value" }}{{- set $ "numeric3" 4E+4 }}`                        | `<pre-assign check code>{{- set $ "numeric3" 4E+4 }}`                           | Global declare and assign of large scientific notation number
| `{{- assert (isNil $.numeric4) "$.numeric4 has already been declared, use = to overwrite existing value" }}{{- set $ "numeric4" 5E-3 }}`                        | `<pre-assign check code>{{- set $ "numeric4" 5E-3 }}`                           | Global declare and assign of small scientific notation number
| `{{- assert (isNil $.hexa1) "$.hexa1 has already been declared, use = to overwrite existing value" }}{{- set $ "hexa1" 0x100 }}`                          | `<pre-assign check code>{{- set $ "hexa1" 0x100 }}`                             | Global declare and assign of hexadecimal number
| `{{- assert (isNil $.result1) "$.result1 has already been declared, use = to overwrite existing value" }}{{- set $ "result1" (mul (add 2 3) 4) }}`                      | `<pre-assign check code>{{- set $ "result1" (mul (add 2 3) 4) }}`               | Global declare and assign of mathematic expression
| `{{- assert (isNil $.result2) "$.result2 has already been declared, use = to overwrite existing value" }}{{- set $ "result2" ((String "hello world!").Title) }}` | `<pre-assign check code>{{- set $ "result2" ((String "hello world!").Title) }}` | Global declare and assign of generic expression
| `{{- assert (not (isNil $.result2)) "$.result2 does not exist, use := to declare new variable" }}{{- set $ "result2" "Replaced" }}`                    | `<pre-assign check code>{{- set $ "result2" "Replaced" }}`                      | Global replacement of previously declared global variable
| `{{- set $ "result1" "Replaced" }}`                   | `{{- set $ "result1" "Replaced" }}`                                             | Global declare and assign or replacement of previously declared global variable

## Local variables

First declaration of local variable must use the `:=` assignment operator and subsequent assignation must use only `=`.

There are many form used to declare local variable using razor syntax:

- `&#64;{variable} := <value or expression>`
- `&#64;{variable := <value or expression>}`
- `&#64;$variable := <value or expression>`

| Razor expression                             | Go Template                                        | Note
| ----------------                             | -----------                                        | ----
| `{{- $string := "string value" }}`                | `{{- $string := "string value" }}`                 | Local declare and assign of string
| `{{- $numeric1 := 10 }}`                          | `{{- $numeric1 := 10 }}`                           | Local declare and assign of integer
| `{{- $numeric2 := 1.23 }}`                         | `{{- $numeric2 := 1.23 }}`                         | Local declare and assign of floating point
| `{{- $numeric3 := 4E+4 }}`                        | `{{- $numeric3 := 4E+4 }}`                         | Local declare and assign of large scientific number
| `{{- $numeric4 := 5E-3 }}`                        | `{{- $numeric4 := 5E-3 }}`                         | Local declare and assign of small scientific number
| `{{- $hexa1 := 0x100 }}`                          | `{{- $hexa1 := 0x100 }}`                           | Local declare and assign of hexadecimal number
| `{{- $result1 := mul (add 2 3) 4 }}`                      | `{{- $result1 := mul (add 2 3) 4 }}`               | Local declare and assign of mathematic expression
| `{{- $result2 := (String "hello world!").Title }}` | `{{- $result2 := (String "hello world!").Title }}` | Local declare and assign of generic expression
| `{{- $result2 = "Replaced" }}`                   | `{{- $result2 = "Replaced" }}`                     | Local replacement of previously declared local variable

## Assignment operators

Using the Razor syntax, it is possible to use assignment operators such as `+=`, `/=`... The operators that are supported are:

| Operator    | Assignment   | Note
| ----------- | ------------ | ----
| `+`         | `+=`         | Addition
| `-`         | `-=`         | Subtraction
| `*`         | `*=`         | Multiplication
| `/`, `÷`    | `/=`, `÷=`   | Division
| `%`         | `%=`         | Modulo
| `&`         | `&=`         | Bitwise AND
| `|`         | `|=`         | Bitwise OR
| `^`         | `^=`         | Bitwise XOR
| `&^`        | `&^=`        | Bit clear
| `<<`, `«`   | `<<=`, `«==` | Left shift
| `>>`, `»`   | `>>=`, `»==` | Right shift

| Razor expression  | Go Template                                                | Note
| ----------------  | -----------                                                | ----
| `{{- set $ "num" 5 }}`       | `{{- set $ "num" 5 }}`                                     | Global assignation
| `{{- assert (not (isNil $.num)) "$.num does not exist, use := to declare new variable" }}{{- set $ "num" (add $.num 10) }}`      | `<pre-assign check code>{{- set $ "num" (add $.num 10) }}` | Add assignment operator on global
| `{{- $local := 5 }}`   | `{{- $local := 5 }}`                                       | Local assignation
| `{{- $local = add $local 10 }}`   | `{{- $local = add $local 10 }}`                            | Add assignment operator on local
| `{{- $local = mul $local 20 }}`  | `{{- $local = mul $local 20 }}`                            | Multiply assignment operator on local
| `{{- $local = div $local 2 }}`   | `{{- $local = div $local 2 }}`                             | Divide assignment operator on local

### Exception

| Razor expression                                | Go Template                                        | Note
| ----------------                                | -----------                                        | ----
| `{{- $invalid := $.print }} "hello" "world" | upper`   | `{{- $invalid := print }} "hello" "world" | upper` | Using a mixup of go template expression and razor expression could lead to undesired result
| `{{- $valid := print "hello" "world" | upper }}`     | `{{- $valid := print "hello" "world" | upper }}`   | Enclosing the whole assignation statement within {} ensures that the whole expression is assigned
| `{{ $valid := print "hello" "world" | upper }}`    | `{{- $valid := print "hello" "world" | upper }}`   | Using that syntax give the exact same result

### Assignation within expression

```go
{{- range $value := to 10 }}
    {{ $value }}
{{- end }}
```

```go
{{- range $index, $value := to 10 }}
    {{ $index }} = {{ mul $value 2 }}
{{- end }}
```

```go
{{- if $result := eq (add 2 2) 4 }}
    result = {{ $result }}
{{- end }}
```

```go
{{- with $value := add 2 2 }}
    value = {{ $value }}
{{- end }}
```
